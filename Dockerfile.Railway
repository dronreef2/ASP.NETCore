# Dockerfile otimizado para Railway
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

# Definir diretório de trabalho
WORKDIR /src

# Copiar arquivos de projeto primeiro para cache de build
COPY ["TutorCopiloto.csproj", "./"]
COPY ["Directory.Build.props", "./"]

# Restaurar dependências
RUN dotnet restore "TutorCopiloto.csproj"

# Copiar código fonte
COPY . .

# Build da aplicação
RUN dotnet build "TutorCopiloto.csproj" -c Release -o /app/build

# Publicar aplicação
FROM build AS publish
RUN dotnet publish "TutorCopiloto.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Imagem final otimizada
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final

# Instalar ferramentas necessárias
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-root
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Definir diretório de trabalho
WORKDIR /app

# Copiar aplicação publicada
COPY --from=publish /app/publish .

# Criar diretório para logs
RUN mkdir -p /app/logs && chown -R appuser:appuser /app

# Alterar para usuário não-root
USER appuser

# Expor porta
EXPOSE 8080

# Definir variável de ambiente para Railway
ENV ASPNETCORE_URLS=http://+:8080
ENV ASPNETCORE_ENVIRONMENT=Production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Comando de inicialização
ENTRYPOINT ["dotnet", "TutorCopiloto.dll"]
