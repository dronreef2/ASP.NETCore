#!/bin/bash
# Script completo para executar a integra√ß√£o GitHub Chat MCP

set -e

echo "üöÄ Tutor Copiloto - GitHub Chat MCP Integration Setup"
echo "=================================================="

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pyproject.toml" ]; then
    echo "‚ùå Execute este script do diret√≥rio python-integration"
    exit 1
fi

# Verificar se o uv est√° instalado
if ! command -v uv &> /dev/null; then
    echo "üì¶ Instalando uv (gerenciador de pacotes Python)..."
    curl -LsSf https://astral.sh/uv/install.sh | sh
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias Python..."
uv sync

# Verificar se o .env existe
if [ ! -f ".env" ]; then
    echo "üìù Criando arquivo .env a partir do exemplo..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Edite o arquivo .env com suas configura√ß√µes antes de continuar"
    echo "   Principalmente a GITHUB_API_KEY se dispon√≠vel"
fi

# Verificar se o servidor .NET est√° rodando
echo "üîç Verificando se o servidor .NET est√° rodando..."
if curl -s http://localhost:5000/health > /dev/null; then
    echo "‚úÖ Servidor .NET est√° rodando"
else
    echo "‚ö†Ô∏è  Servidor .NET n√£o est√° rodando. Inicie-o com:"
    echo "   cd ../dotnet-backend && dotnet run"
fi

# Iniciar o servidor de integra√ß√£o Python
echo "üåê Iniciando servidor de integra√ß√£o Python..."
echo "üìç API dispon√≠vel em: http://localhost:8001"
echo "üìñ Documenta√ß√£o: http://localhost:8001/docs"
echo ""
echo "Para testar a integra√ß√£o:"
echo "curl http://localhost:8001/api/github/status"
echo ""
echo "Para testar com o .NET:"
echo "curl http://localhost:5000/api/github-integration/status"
echo ""

# Executar o servidor
uv run python -m tutor_copiloto_github.main
