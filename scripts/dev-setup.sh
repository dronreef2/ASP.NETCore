#!/bin/bash

# Script de desenvolvimento local para Tutor Copiloto
# Uso: ./scripts/dev-setup.sh

set -e

echo "üéì Configurando ambiente de desenvolvimento do Tutor Copiloto..."

# Verificar Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o encontrado. Instale o Node.js 18+ primeiro."
    exit 1
fi

NODE_VERSION=$(node --version | sed 's/v//')
REQUIRED_VERSION="18.0.0"

if ! printf '%s\n%s\n' "$REQUIRED_VERSION" "$NODE_VERSION" | sort -V -C; then
    echo "‚ùå Node.js vers√£o $NODE_VERSION encontrada. Requer vers√£o 18+"
    exit 1
fi

echo "‚úÖ Node.js $NODE_VERSION OK"

# Verificar Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker primeiro."
    exit 1
fi

echo "‚úÖ Docker OK"

# Verificar se Docker est√° rodando
if ! docker info &> /dev/null; then
    echo "‚ùå Docker n√£o est√° rodando. Inicie o Docker primeiro."
    exit 1
fi

echo "‚úÖ Docker rodando OK"

# Instalar depend√™ncias
echo ""
echo "üì¶ Instalando depend√™ncias..."
npm install

# Configurar .env se n√£o existir
if [[ ! -f .env ]]; then
    echo ""
    echo "üìù Criando arquivo .env..."
    cp .env.example .env
    
    echo ""
    echo "‚ö†Ô∏è IMPORTANTE: Configure suas API keys no arquivo .env:"
    echo "   - ANTHROPIC_API_KEY"
    echo "   - LLAMAINDEX_API_KEY (chave fornecida: llx-3eJdHtkOfZx7fkzusuoDg6nmRxWJGMkkHHzrbw63bZMkuMfr)"
    echo ""
    
    # Configurar automaticamente a chave LlamaIndex
    if command -v sed &> /dev/null; then
        sed -i.bak 's/LLAMAINDEX_API_KEY=llx-your-llamaindex-key-here/LLAMAINDEX_API_KEY=llx-3eJdHtkOfZx7fkzusuoDg6nmRxWJGMkkHHzrbw63bZMkuMfr/' .env
        echo "‚úÖ Chave LlamaIndex configurada automaticamente no .env"
    fi
    
    read -p "Pressione Enter para continuar ap√≥s configurar as API keys..."
else
    echo "‚úÖ Arquivo .env j√° existe"
fi

# Iniciar servi√ßos de desenvolvimento
echo ""
echo "üöÄ Iniciando servi√ßos de desenvolvimento..."

# Parar servi√ßos se j√° estiverem rodando
docker-compose down -v 2>/dev/null || true

# Iniciar servi√ßos
docker-compose up -d

# Aguardar servi√ßos iniciarem
echo "‚è≥ Aguardando servi√ßos iniciarem..."
sleep 10

# Verificar sa√∫de dos servi√ßos
echo ""
echo "üîç Verificando sa√∫de dos servi√ßos..."

services=("postgres:5432" "redis:6379")
for service in "${services[@]}"; do
    service_name=$(echo $service | cut -d: -f1)
    port=$(echo $service | cut -d: -f2)
    
    if nc -z localhost $port 2>/dev/null; then
        echo "‚úÖ $service_name OK"
    else
        echo "‚ùå $service_name n√£o est√° respondendo na porta $port"
    fi
done

# Build inicial
echo ""
echo "üîß Build inicial..."
npm run build

echo ""
echo "üéâ Ambiente de desenvolvimento configurado com sucesso!"
echo ""
echo "Para iniciar o desenvolvimento:"
echo "  1. Terminal 1: npm run dev (todos os servi√ßos)"
echo "  2. Ou separadamente:"
echo "     - Backend: cd backend/orchestrator && npm run dev"
echo "     - Web SPA: cd clients/web-spa && npm run dev"
echo "     - VS Code Ext: cd clients/vscode-ext && npm run watch"
echo ""
echo "URLs √∫teis:"
echo "  - Web Interface: http://localhost:3000"
echo "  - API Backend: http://localhost:8080"
echo "  - API Docs: http://localhost:8080/docs"
echo "  - Grafana: http://localhost:3001 (admin/admin123)"
echo "  - Prometheus: http://localhost:9090"
echo ""
echo "Para parar os servi√ßos: docker-compose down"
