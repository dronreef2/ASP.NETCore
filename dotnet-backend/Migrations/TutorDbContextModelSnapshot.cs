// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TutorCopiloto.Data;

#nullable disable

namespace TutorCopiloto.Migrations
{
    [DbContext(typeof(TutorDbContext))]
    partial class TutorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("TutorCopiloto.Models.AvaliacaoCodigo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<double>("NotaFinal")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm");

                    b.HasIndex("Tema");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Tema", "CriadoEm")
                        .HasDatabaseName("IX_AvaliacoesCodigo_UserId_Tema_CriadoEm");

                    b.ToTable("AvaliacoesCodigo");

                    b.HasData(
                        new
                        {
                            Id = "demo-assessment-1",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9898),
                            Feedback = "Bom entendimento dos conceitos fundamentais. Continue praticando loops e condicionais.",
                            NotaFinal = 8.5,
                            Tema = "JavaScript Básico",
                            UserId = "demo-user-1"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.Interacao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("FerramentaUsada")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MensagemErro")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessaoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sucesso")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TempoExecucaoMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm");

                    b.HasIndex("FerramentaUsada");

                    b.HasIndex("SessaoId");

                    b.HasIndex("Tipo");

                    b.HasIndex("SessaoId", "Tipo", "CriadoEm")
                        .HasDatabaseName("IX_Interacoes_SessaoId_Tipo_CriadoEm");

                    b.ToTable("Interacoes");

                    b.HasData(
                        new
                        {
                            Id = "demo-interaction-1",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9862),
                            FerramentaUsada = "code-analyzer",
                            SessaoId = "demo-session-1",
                            Sucesso = true,
                            TempoExecucaoMs = 1500,
                            Tipo = "explain"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.LearningModule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConteudoMarkdown")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("LearningPathId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ObrigatorioParaProgresso")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ordem")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecursosAdicionais")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoEstimadoMinutos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LearningPathId");

                    b.HasIndex("Ordem");

                    b.HasIndex("LearningPathId", "Ordem")
                        .HasDatabaseName("IX_LearningModules_LearningPathId_Ordem");

                    b.ToTable("LearningModules");

                    b.HasData(
                        new
                        {
                            Id = "mod-js-variables",
                            ConteudoMarkdown = "# Variáveis em JavaScript\n\nVariáveis são containers para armazenar dados...",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9964),
                            Descricao = "Entenda como declarar e usar variáveis em JavaScript",
                            LearningPathId = "lp-javascript-basics",
                            Nome = "Variáveis e Tipos de Dados",
                            ObrigatorioParaProgresso = true,
                            Ordem = 1,
                            RecursosAdicionais = "https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Grammar_and_types",
                            TempoEstimadoMinutos = 45
                        },
                        new
                        {
                            Id = "mod-js-functions",
                            ConteudoMarkdown = "# Funções em JavaScript\n\nFunções são blocos de código reutilizáveis...",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9966),
                            Descricao = "Aprenda a criar e usar funções em JavaScript",
                            LearningPathId = "lp-javascript-basics",
                            Nome = "Funções",
                            ObrigatorioParaProgresso = true,
                            Ordem = 2,
                            RecursosAdicionais = "https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Functions",
                            TempoEstimadoMinutos = 60
                        },
                        new
                        {
                            Id = "mod-react-intro",
                            ConteudoMarkdown = "# Introdução ao React\n\nReact é uma biblioteca JavaScript para construir interfaces de usuário...",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9969),
                            Descricao = "Conceitos básicos e configuração do ambiente React",
                            LearningPathId = "lp-react-fundamentals",
                            Nome = "Introdução ao React",
                            ObrigatorioParaProgresso = true,
                            Ordem = 1,
                            RecursosAdicionais = "https://react.dev/learn",
                            TempoEstimadoMinutos = 90
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.LearningPath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Dificuldade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DuracaoEstimadaHoras")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdemSequencia")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Ativo");

                    b.HasIndex("Categoria");

                    b.HasIndex("Dificuldade");

                    b.HasIndex("OrdemSequencia");

                    b.HasIndex("Categoria", "Dificuldade", "Ativo")
                        .HasDatabaseName("IX_LearningPaths_Categoria_Dificuldade_Ativo");

                    b.ToTable("LearningPaths");

                    b.HasData(
                        new
                        {
                            Id = "lp-javascript-basics",
                            Ativo = true,
                            Categoria = "Frontend",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9927),
                            Descricao = "Aprenda os conceitos fundamentais de JavaScript do zero",
                            Dificuldade = "Beginner",
                            DuracaoEstimadaHoras = 20,
                            Nome = "JavaScript Fundamentals",
                            OrdemSequencia = 1
                        },
                        new
                        {
                            Id = "lp-react-fundamentals",
                            Ativo = true,
                            Categoria = "Frontend",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9930),
                            Descricao = "Domine os conceitos básicos do React para desenvolvimento frontend",
                            Dificuldade = "Intermediate",
                            DuracaoEstimadaHoras = 35,
                            Nome = "React Fundamentals",
                            OrdemSequencia = 2
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.ModuleCompletion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ConcluidoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeedbackEstudante")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("LearningModuleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("NotaAvaliacao")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("StudentProgressId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoGastoMinutos")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConcluidoEm");

                    b.HasIndex("LearningModuleId");

                    b.HasIndex("StudentProgressId");

                    b.HasIndex("StudentProgressId", "ConcluidoEm")
                        .HasDatabaseName("IX_ModuleCompletion_StudentProgressId_ConcluidoEm");

                    b.HasIndex("StudentProgressId", "LearningModuleId")
                        .IsUnique();

                    b.ToTable("ModuleCompletions");

                    b.HasData(
                        new
                        {
                            Id = "completion-demo-1",
                            ConcluidoEm = new DateTime(2025, 8, 19, 2, 15, 21, 443, DateTimeKind.Utc).AddTicks(37),
                            FeedbackEstudante = "Conteúdo muito claro e bem explicado!",
                            LearningModuleId = "mod-js-variables",
                            NotaAvaliacao = 8.5,
                            StudentProgressId = "progress-demo-1",
                            TempoGastoMinutos = 45
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.Sessao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoMinutos")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinalizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CriadoEm")
                        .HasDatabaseName("IX_Sessoes_UserId_CriadoEm");

                    b.ToTable("Sessoes");

                    b.HasData(
                        new
                        {
                            Id = "demo-session-1",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9817),
                            DuracaoMinutos = 30,
                            FinalizadoEm = new DateTime(2025, 8, 22, 2, 45, 21, 442, DateTimeKind.Utc).AddTicks(9818),
                            UserId = "demo-user-1"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.StudentProgress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConcluidoEm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IniciadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("LearningPathId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("ProgressoPercentual")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TempoGastoMinutos")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UltimaAtividadeEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LearningPathId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "LearningPathId")
                        .IsUnique();

                    b.HasIndex("UserId", "Status", "UltimaAtividadeEm")
                        .HasDatabaseName("IX_StudentProgress_UserId_Status_UltimaAtividade");

                    b.ToTable("StudentProgresses");

                    b.HasData(
                        new
                        {
                            Id = "progress-demo-1",
                            IniciadoEm = new DateTime(2025, 8, 17, 2, 15, 21, 443, DateTimeKind.Utc),
                            LearningPathId = "lp-javascript-basics",
                            ProgressoPercentual = 50.0,
                            Status = "InProgress",
                            TempoGastoMinutos = 45,
                            UltimaAtividadeEm = new DateTime(2025, 8, 22, 0, 15, 21, 443, DateTimeKind.Utc).AddTicks(3),
                            UserId = "demo-user-1"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TurmaId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UltimoAcesso")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TurmaId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = "demo-user-1",
                            CriadoEm = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9662),
                            Email = "demo@tutorcopiloto.com",
                            Nome = "Usuário Demo",
                            TurmaId = "turma-demo",
                            UltimoAcesso = new DateTime(2025, 8, 22, 2, 15, 21, 442, DateTimeKind.Utc).AddTicks(9664)
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.AvaliacaoCodigo", b =>
                {
                    b.HasOne("TutorCopiloto.Models.Usuario", "Usuario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Interacao", b =>
                {
                    b.HasOne("TutorCopiloto.Models.Sessao", "Sessao")
                        .WithMany("Interacoes")
                        .HasForeignKey("SessaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sessao");
                });

            modelBuilder.Entity("TutorCopiloto.Models.LearningModule", b =>
                {
                    b.HasOne("TutorCopiloto.Models.LearningPath", "LearningPath")
                        .WithMany("Modulos")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("TutorCopiloto.Models.ModuleCompletion", b =>
                {
                    b.HasOne("TutorCopiloto.Models.LearningModule", "LearningModule")
                        .WithMany("Completoes")
                        .HasForeignKey("LearningModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TutorCopiloto.Models.StudentProgress", "StudentProgress")
                        .WithMany("ModulosCompletados")
                        .HasForeignKey("StudentProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningModule");

                    b.Navigation("StudentProgress");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Sessao", b =>
                {
                    b.HasOne("TutorCopiloto.Models.Usuario", "Usuario")
                        .WithMany("Sessoes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TutorCopiloto.Models.StudentProgress", b =>
                {
                    b.HasOne("TutorCopiloto.Models.LearningPath", "LearningPath")
                        .WithMany("ProgressosEstudantes")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TutorCopiloto.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningPath");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TutorCopiloto.Models.LearningModule", b =>
                {
                    b.Navigation("Completoes");
                });

            modelBuilder.Entity("TutorCopiloto.Models.LearningPath", b =>
                {
                    b.Navigation("Modulos");

                    b.Navigation("ProgressosEstudantes");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Sessao", b =>
                {
                    b.Navigation("Interacoes");
                });

            modelBuilder.Entity("TutorCopiloto.Models.StudentProgress", b =>
                {
                    b.Navigation("ModulosCompletados");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Usuario", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Sessoes");
                });
#pragma warning restore 612, 618
        }
    }
}
