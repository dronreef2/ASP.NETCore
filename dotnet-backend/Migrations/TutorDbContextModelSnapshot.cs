// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TutorCopiloto.Data;

#nullable disable

namespace TutorCopiloto.Migrations
{
    [DbContext(typeof(TutorDbContext))]
    partial class TutorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("TutorCopiloto.Models.AvaliacaoCodigo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<double>("NotaFinal")
                        .HasPrecision(5, 2)
                        .HasColumnType("REAL");

                    b.Property<string>("Tema")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm");

                    b.HasIndex("Tema");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Tema", "CriadoEm")
                        .HasDatabaseName("IX_AvaliacoesCodigo_UserId_Tema_CriadoEm");

                    b.ToTable("AvaliacoesCodigo");

                    b.HasData(
                        new
                        {
                            Id = "demo-assessment-1",
                            CriadoEm = new DateTime(2025, 8, 20, 4, 36, 24, 68, DateTimeKind.Utc).AddTicks(9916),
                            Feedback = "Bom entendimento dos conceitos fundamentais. Continue praticando loops e condicionais.",
                            NotaFinal = 8.5,
                            Tema = "JavaScript Básico",
                            UserId = "demo-user-1"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.Interacao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("FerramentaUsada")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MensagemErro")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessaoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Sucesso")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TempoExecucaoMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm");

                    b.HasIndex("FerramentaUsada");

                    b.HasIndex("SessaoId");

                    b.HasIndex("Tipo");

                    b.HasIndex("SessaoId", "Tipo", "CriadoEm")
                        .HasDatabaseName("IX_Interacoes_SessaoId_Tipo_CriadoEm");

                    b.ToTable("Interacoes");

                    b.HasData(
                        new
                        {
                            Id = "demo-interaction-1",
                            CriadoEm = new DateTime(2025, 8, 20, 4, 36, 24, 68, DateTimeKind.Utc).AddTicks(9878),
                            FerramentaUsada = "code-analyzer",
                            SessaoId = "demo-session-1",
                            Sucesso = true,
                            TempoExecucaoMs = 1500,
                            Tipo = "explain"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.Sessao", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DuracaoMinutos")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinalizadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriadoEm");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CriadoEm")
                        .HasDatabaseName("IX_Sessoes_UserId_CriadoEm");

                    b.ToTable("Sessoes");

                    b.HasData(
                        new
                        {
                            Id = "demo-session-1",
                            CriadoEm = new DateTime(2025, 8, 20, 4, 36, 24, 68, DateTimeKind.Utc).AddTicks(9813),
                            DuracaoMinutos = 30,
                            FinalizadoEm = new DateTime(2025, 8, 20, 5, 6, 24, 68, DateTimeKind.Utc).AddTicks(9813),
                            UserId = "demo-user-1"
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("TurmaId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UltimoAcesso")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TurmaId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = "demo-user-1",
                            CriadoEm = new DateTime(2025, 8, 20, 4, 36, 24, 68, DateTimeKind.Utc).AddTicks(9473),
                            Email = "demo@tutorcopiloto.com",
                            Nome = "Usuário Demo",
                            TurmaId = "turma-demo",
                            UltimoAcesso = new DateTime(2025, 8, 20, 4, 36, 24, 68, DateTimeKind.Utc).AddTicks(9474)
                        });
                });

            modelBuilder.Entity("TutorCopiloto.Models.AvaliacaoCodigo", b =>
                {
                    b.HasOne("TutorCopiloto.Models.Usuario", "Usuario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Interacao", b =>
                {
                    b.HasOne("TutorCopiloto.Models.Sessao", "Sessao")
                        .WithMany("Interacoes")
                        .HasForeignKey("SessaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sessao");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Sessao", b =>
                {
                    b.HasOne("TutorCopiloto.Models.Usuario", "Usuario")
                        .WithMany("Sessoes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Sessao", b =>
                {
                    b.Navigation("Interacoes");
                });

            modelBuilder.Entity("TutorCopiloto.Models.Usuario", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Sessoes");
                });
#pragma warning restore 612, 618
        }
    }
}
