import React, { useState, useEffect } from 'react';

export default function ReportsSection() {
  const [reports, setReports] = useState([]);
  const [selectedReport, setSelectedReport] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [reportType, setReportType] = useState('usage');

  const reportTypes = [
    { value: 'usage', label: 'üìä Relat√≥rio de Uso', description: 'Estat√≠sticas de utiliza√ß√£o do sistema' },
    { value: 'performance', label: '‚ö° Relat√≥rio de Performance', description: 'M√©tricas de desempenho e resposta' },
    { value: 'errors', label: 'üö® Relat√≥rio de Erros', description: 'Logs de erros e problemas encontrados' },
    { value: 'ai-activity', label: 'ü§ñ Atividade de IA', description: 'Uso dos modelos de IA e resultados' },
    { value: 'user-activity', label: 'üë• Atividade de Usu√°rios', description: 'Comportamento e padr√µes de uso' }
  ];

  useEffect(() => {
    loadReports();
  }, []);

  const loadReports = () => {
    // Simular carregamento de relat√≥rios existentes
    const mockReports = [
      {
        id: 1,
        title: 'Relat√≥rio de Uso - Janeiro 2025',
        type: 'usage',
        date: '2025-01-31',
        size: '2.4 MB',
        status: 'completed'
      },
      {
        id: 2,
        title: 'Performance Q4 2024',
        type: 'performance',
        date: '2024-12-31',
        size: '1.8 MB',
        status: 'completed'
      },
      {
        id: 3,
        title: 'Erros do Sistema - Dezembro',
        type: 'errors',
        date: '2024-12-31',
        size: '956 KB',
        status: 'completed'
      }
    ];
    setReports(mockReports);
  };

  const generateReport = async () => {
    setIsGenerating(true);

    try {
      // Simular gera√ß√£o de relat√≥rio
      await new Promise(resolve => setTimeout(resolve, 3000));

      const newReport = {
        id: Date.now(),
        title: `${reportTypes.find(t => t.value === reportType).label} - ${new Date().toLocaleDateString('pt-BR')}`,
        type: reportType,
        date: new Date().toISOString().split('T')[0],
        size: '1.2 MB',
        status: 'completed'
      };

      setReports(prev => [newReport, ...prev]);
      setSelectedReport(newReport);
    } catch (error) {
      console.error('Erro ao gerar relat√≥rio:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadReport = (report) => {
    // Simular download
    const element = document.createElement('a');
    const file = new Blob(['Conte√∫do do relat√≥rio: ' + report.title], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${report.title}.txt`;
    element.click();
  };

  const deleteReport = (reportId) => {
    setReports(prev => prev.filter(r => r.id !== reportId));
    if (selectedReport && selectedReport.id === reportId) {
      setSelectedReport(null);
    }
  };

  return (
    <div className="grid">
      <div className="card">
        <div className="card-header">
          <h3 className="card-title">üìã Sistema de Relat√≥rios</h3>
          <p className="card-description">Gere e gerencie relat√≥rios anal√≠ticos do sistema</p>
        </div>

        {/* Gera√ß√£o de Relat√≥rios */}
        <div className="form-group">
          <label className="form-label">Tipo de Relat√≥rio:</label>
          <select
            value={reportType}
            onChange={(e) => setReportType(e.target.value)}
            className="form-input"
          >
            {reportTypes.map((type) => (
              <option key={type.value} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
        </div>

        <div style={{ marginBottom: '1rem' }}>
          <div style={{ fontSize: '0.9rem', color: '#6b7280', marginBottom: '0.5rem' }}>
            {reportTypes.find(t => t.value === reportType).description}
          </div>
        </div>

        <button
          onClick={generateReport}
          disabled={isGenerating}
          className="btn btn-primary"
          style={{ width: '100%' }}
        >
          {isGenerating ? (
            <div className="loading">
              <div className="spinner"></div>
              Gerando Relat√≥rio...
            </div>
          ) : (
            'üìä Gerar Relat√≥rio'
          )}
        </button>
      </div>

      {/* Lista de Relat√≥rios */}
      <div className="card">
        <div className="card-header">
          <h3 className="card-title">üìÅ Relat√≥rios Dispon√≠veis</h3>
          <p className="card-description">Relat√≥rios gerados anteriormente</p>
        </div>

        <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
          {reports.length === 0 ? (
            <div style={{ textAlign: 'center', color: '#6b7280', padding: '2rem' }}>
              Nenhum relat√≥rio encontrado. Gere o primeiro relat√≥rio para come√ßar.
            </div>
          ) : (
            reports.map((report) => (
              <div
                key={report.id}
                style={{
                  padding: '1rem',
                  border: `2px solid ${selectedReport && selectedReport.id === report.id ? '#667eea' : '#e5e7eb'}`,
                  borderRadius: '8px',
                  background: selectedReport && selectedReport.id === report.id ? '#f0f4ff' : 'white',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease'
                }}
                onClick={() => setSelectedReport(report)}
              >
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                  <div style={{ flex: 1 }}>
                    <div style={{ fontWeight: '600', marginBottom: '0.25rem', color: '#374151' }}>
                      {report.title}
                    </div>
                    <div style={{ fontSize: '0.9rem', color: '#6b7280', marginBottom: '0.5rem' }}>
                      üìÖ {new Date(report.date).toLocaleDateString('pt-BR')} ‚Ä¢
                      üìé {report.size} ‚Ä¢
                      {report.status === 'completed' ? '‚úÖ Conclu√≠do' : '‚è≥ Processando'}
                    </div>
                  </div>

                  <div style={{ display: 'flex', gap: '0.5rem' }}>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        downloadReport(report);
                      }}
                      className="btn btn-success"
                      style={{ fontSize: '0.8rem', padding: '0.25rem 0.75rem' }}
                    >
                      ‚¨áÔ∏è
                    </button>

                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteReport(report.id);
                      }}
                      className="btn btn-secondary"
                      style={{ fontSize: '0.8rem', padding: '0.25rem 0.75rem', background: '#ef4444', color: 'white' }}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Detalhes do Relat√≥rio Selecionado */}
      {selectedReport && (
        <div className="card">
          <div className="card-header">
            <h3 className="card-title">üìÑ Detalhes do Relat√≥rio</h3>
            <p className="card-description">{selectedReport.title}</p>
          </div>

          <div className="grid grid-2">
            <div>
              <h4 style={{ margin: '0 0 1rem 0', color: '#374151' }}>üìä Informa√ß√µes Gerais</h4>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
                <div><strong>Tipo:</strong> {reportTypes.find(t => t.value === selectedReport.type).label}</div>
                <div><strong>Data de Gera√ß√£o:</strong> {new Date(selectedReport.date).toLocaleDateString('pt-BR')}</div>
                <div><strong>Tamanho:</strong> {selectedReport.size}</div>
                <div><strong>Status:</strong> {selectedReport.status === 'completed' ? '‚úÖ Conclu√≠do' : '‚è≥ Processando'}</div>
              </div>
            </div>

            <div>
              <h4 style={{ margin: '0 0 1rem 0', color: '#374151' }}>üìã A√ß√µes Dispon√≠veis</h4>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
                <button
                  onClick={() => downloadReport(selectedReport)}
                  className="btn btn-primary"
                >
                  ‚¨áÔ∏è Baixar Relat√≥rio
                </button>

                <button
                  onClick={() => setSelectedReport(null)}
                  className="btn btn-secondary"
                >
                  ‚ùå Fechar Detalhes
                </button>
              </div>
            </div>
          </div>

          {/* Preview do Relat√≥rio (simulado) */}
          <div style={{ marginTop: '1.5rem' }}>
            <h4 style={{ margin: '0 0 1rem 0', color: '#374151' }}>üëÅÔ∏è Preview do Conte√∫do</h4>
            <div style={{
              background: '#f8fafc',
              padding: '1rem',
              borderRadius: '8px',
              fontFamily: 'monospace',
              fontSize: '0.9rem',
              color: '#374151',
              maxHeight: '300px',
              overflowY: 'auto'
            }}>
              <pre style={{ margin: 0 }}>
{`RELAT√ìRIO: ${selectedReport.title}
=====================================

DATA DE GERA√á√ÉO: ${new Date(selectedReport.date).toLocaleDateString('pt-BR')}
TIPO: ${reportTypes.find(t => t.value === selectedReport.type).label}

RESUMO EXECUTIVO
----------------
Este relat√≥rio cont√©m informa√ß√µes detalhadas sobre o uso do sistema
Tutor Copiloto durante o per√≠odo analisado.

ESTAT√çSTICAS PRINCIPAIS
-----------------------
- Total de Usu√°rios Ativos: 1,247
- Sess√µes de Chat: 3,492
- Consultas de IA: 8,156
- Tempo M√©dio de Resposta: 1.2s

DETALHES T√âCNICOS
-----------------
- Backend .NET Status: Online
- Backend Node.js Status: Online
- Banco de Dados: PostgreSQL
- Cache: Redis Cluster

CONCLUS√ÉO
---------
O sistema apresentou performance satisfat√≥ria durante o per√≠odo,
com todos os servi√ßos funcionando corretamente.

=====================================
Fim do Relat√≥rio`}
              </pre>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
