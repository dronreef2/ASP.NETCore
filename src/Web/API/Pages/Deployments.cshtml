@page "/deployments"
@model TutorCopiloto.Pages.DeploymentsModel
@{
    ViewData["Title"] = "Gerenciamento de Deployments";
    Layout = "_Layout";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>üöÄ Deployments</h1>
                <div>
                    <button class="btn btn-primary" onclick="refreshStatus()">
                        <i class="fas fa-sync-alt"></i> Atualizar Status
                    </button>
                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#manualDeployModal">
                        <i class="fas fa-plus"></i> Deploy Manual
                    </button>
                </div>
            </div>

            <!-- Status do Ngrok -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">üì° Status do T√∫nel Ngrok</h5>
                </div>
                <div class="card-body">
                    <div id="ngrok-status">
                        <div class="d-flex align-items-center">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            <span>Verificando status...</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lista de Deployments -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">üìã Hist√≥rico de Deployments</h5>
                </div>
                <div class="card-body">
                    <div id="deployments-list">
                        <div class="text-center">
                            <div class="spinner-border" role="status"></div>
                            <p class="mt-2">Carregando deployments...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Deploy Manual -->
<div class="modal fade" id="manualDeployModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üöÄ Deploy Manual</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>Dica:</strong> Voc√™ pode usar qualquer reposit√≥rio GitHub p√∫blico! 
                    Cole a URL completa do reposit√≥rio que deseja analisar.
                </div>
                <form id="manual-deploy-form">
                    <div class="mb-3">
                        <label for="repository-url" class="form-label">
                            URL do Reposit√≥rio GitHub *
                            <small class="text-muted">(p√∫blico ou privado)</small>
                        </label>
                        <input type="url" class="form-control" id="repository-url" required 
                               placeholder="https://github.com/usuario/repositorio.git">
                        <div class="form-text">
                            <i class="fas fa-lightbulb"></i> Exemplos: 
                            <code>microsoft/vscode</code>, 
                            <code>facebook/react</code>, 
                            <code>seu-usuario/projeto</code>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="branch" class="form-label">Branch</label>
                        <input type="text" class="form-control" id="branch" value="main" 
                               placeholder="main, master, develop, feature/nome">
                        <div class="form-text">
                            <i class="fas fa-code-branch"></i> Branch padr√£o: main
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="author" class="form-label">Autor</label>
                        <input type="text" class="form-control" id="author" 
                               placeholder="Seu nome ou identificador">
                        <div class="form-text">
                            <i class="fas fa-user"></i> Quem est√° solicitando o deploy
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="submitManualDeploy()">
                    <i class="fas fa-rocket"></i> Iniciar Deploy
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Logs do Deploy -->
<div class="modal fade" id="deployLogsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üìù Logs do Deploy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <pre id="deploy-logs" class="bg-dark text-light p-3" style="height: 400px; overflow-y: auto;"></pre>
            </div>
        </div>
    </div>
</div>

<script>
let deploymentsInterval;

document.addEventListener('DOMContentLoaded', function() {
    refreshStatus();
    loadDeployments();
    
    // Atualiza automaticamente a cada 10 segundos
    deploymentsInterval = setInterval(loadDeployments, 10000);
});

async function refreshStatus() {
    try {
        const response = await fetch('/api/ngrok/status');
        const data = await response.json();
        
        const statusDiv = document.getElementById('ngrok-status');
        
        if (data.isRunning) {
            statusDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <span class="badge bg-success me-2">ATIVO</span>
                        <strong>T√∫nel rodando</strong>
                    </div>
                    <button class="btn btn-sm btn-danger" onclick="stopNgrok()">Parar</button>
                </div>
                ${data.publicUrl ? `
                    <div class="mt-2">
                        <small class="text-muted">URL P√∫blica:</small><br>
                        <a href="${data.publicUrl}" target="_blank" class="text-break">${data.publicUrl}</a>
                    </div>
                ` : ''}
                ${data.webhookUrl ? `
                    <div class="mt-2">
                        <small class="text-muted">URL do Webhook:</small><br>
                        <code class="text-break">${data.webhookUrl}</code>
                        <button class="btn btn-sm btn-outline-secondary ms-2" onclick="copyToClipboard('${data.webhookUrl}')">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                ` : ''}
            `;
        } else {
            statusDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <span class="badge bg-secondary me-2">INATIVO</span>
                        <strong>T√∫nel parado</strong>
                    </div>
                    <button class="btn btn-sm btn-success" onclick="startNgrok()">Iniciar</button>
                </div>
            `;
        }
    } catch (error) {
        console.error('Erro ao verificar status:', error);
        document.getElementById('ngrok-status').innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle"></i> Erro ao verificar status do ngrok
            </div>
        `;
    }
}

async function loadDeployments() {
    try {
        const response = await fetch('/api/webhook/deployments');
        const deployments = await response.json();
        
        const listDiv = document.getElementById('deployments-list');
        
        if (deployments.length === 0) {
            listDiv.innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <p>Nenhum deployment encontrado</p>
                </div>
            `;
            return;
        }
        
        listDiv.innerHTML = deployments.map(deployment => `
            <div class="card mb-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="card-title">
                                ${getStatusBadge(deployment.status)}
                                ${deployment.repositoryUrl.split('/').pop().replace('.git', '')}
                            </h6>
                            <p class="card-text mb-1">
                                <small class="text-muted">
                                    <i class="fas fa-code-branch"></i> ${deployment.branch} ‚Ä¢
                                    <i class="fas fa-user"></i> ${deployment.author} ‚Ä¢
                                    <i class="fas fa-clock"></i> ${formatDate(deployment.createdAt)}
                                </small>
                            </p>
                            ${deployment.commitSha ? `
                                <p class="card-text mb-1">
                                    <small class="text-muted">
                                        <i class="fas fa-code-commit"></i> ${deployment.commitSha.substring(0, 8)}
                                    </small>
                                </p>
                            ` : ''}
                            ${deployment.deployUrl ? `
                                <p class="card-text">
                                    <a href="${deployment.deployUrl}" target="_blank" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-external-link-alt"></i> Ver Deploy
                                    </a>
                                </p>
                            ` : ''}
                        </div>
                        <div>
                            <button class="btn btn-sm btn-outline-secondary" onclick="showLogs('${deployment.id}')">
                                <i class="fas fa-file-alt"></i> Logs
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Erro ao carregar deployments:', error);
    }
}

function getStatusBadge(status) {
    const badges = {
        'Pending': '<span class="badge bg-secondary">PENDENTE</span>',
        'Running': '<span class="badge bg-warning">EXECUTANDO</span>',
        'Success': '<span class="badge bg-success">SUCESSO</span>',
        'Failed': '<span class="badge bg-danger">FALHOU</span>',
        'Cancelled': '<span class="badge bg-secondary">CANCELADO</span>'
    };
    return badges[status] || '<span class="badge bg-secondary">DESCONHECIDO</span>';
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleString('pt-BR');
}

async function startNgrok() {
    try {
        const response = await fetch('/api/ngrok/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ port: 5000 })
        });
        
        if (response.ok) {
            await refreshStatus();
        } else {
            alert('Erro ao iniciar ngrok');
        }
    } catch (error) {
        console.error('Erro ao iniciar ngrok:', error);
        alert('Erro ao iniciar ngrok');
    }
}

async function stopNgrok() {
    try {
        const response = await fetch('/api/ngrok/stop', { method: 'POST' });
        
        if (response.ok) {
            await refreshStatus();
        } else {
            alert('Erro ao parar ngrok');
        }
    } catch (error) {
        console.error('Erro ao parar ngrok:', error);
        alert('Erro ao parar ngrok');
    }
}

async function submitManualDeploy() {
    const form = document.getElementById('manual-deploy-form');
    const repositoryUrl = document.getElementById('repository-url').value;
    
    // Valida√ß√£o b√°sica da URL do GitHub
    if (!repositoryUrl.includes('github.com')) {
        alert('Por favor, insira uma URL v√°lida do GitHub');
        return;
    }
    
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }
    
    const data = {
        repositoryUrl: repositoryUrl,
        branch: document.getElementById('branch').value || 'main',
        author: document.getElementById('author').value || 'Manual Deploy'
    };
    
    // Mostra loading
    const submitBtn = event.target;
    const originalHTML = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Iniciando...';
    
    try {
        const response = await fetch('/api/webhook/deploy', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });
        
        if (response.ok) {
            const result = await response.json();
            alert(`‚úÖ Deploy iniciado com sucesso!\n\nID: ${result.deploymentId}\n\nAcompanhe o progresso na lista de deployments.`);
            
            // Fecha modal e recarrega lista
            bootstrap.Modal.getInstance(document.getElementById('manualDeployModal')).hide();
            form.reset();
            loadDeployments();
        } else {
            const error = await response.json();
            alert(`‚ùå Erro ao iniciar deploy: ${error.error || 'Erro desconhecido'}`);
        }
    } catch (error) {
        console.error('Erro ao fazer deploy:', error);
        alert('‚ùå Erro de conex√£o. Verifique se o servidor est√° rodando.');
    } finally {
        // Restaura bot√£o
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalHTML;
    }
}

async function showLogs(deploymentId) {
    try {
        const response = await fetch(`/api/webhook/deployments/${deploymentId}/logs`);
        const data = await response.json();
        
        document.getElementById('deploy-logs').textContent = data.logs || 'Nenhum log dispon√≠vel';
        new bootstrap.Modal(document.getElementById('deployLogsModal')).show();
    } catch (error) {
        console.error('Erro ao carregar logs:', error);
        alert('Erro ao carregar logs');
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        // Feedback visual
        const btn = event.target.closest('button');
        const originalHTML = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-check"></i>';
        setTimeout(() => {
            btn.innerHTML = originalHTML;
        }, 1000);
    });
}

// Limpa interval quando sair da p√°gina
window.addEventListener('beforeunload', function() {
    if (deploymentsInterval) {
        clearInterval(deploymentsInterval);
    }
});
</script>

<style>
.card {
    border-left: 4px solid #007bff;
}

.text-break {
    word-break: break-all;
}

#deploy-logs {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
    line-height: 1.4;
}

.badge {
    font-size: 0.75rem;
}
</style>
